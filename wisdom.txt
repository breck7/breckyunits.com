Cartographs: a Tiny Language for Great Advice
=============================================

May 6, 2021

I split advice into two categories:

1. FortuneCookies
2. Cartographs.

Examples
========

FortuneCookies:

> ü•† Reading is to the mind what exercise is to the body.

> ü•† Talking to users is the most important thing a startup can do.

Cartographs:

üó∫Ô∏è In my whole life, I have known no wise people (over a broad subject matter area) who didn't read all the time ‚Äì none, zero.
Charlie Munger

üó∫Ô∏è I don't know of a single case of a startup that felt they spent too much time talking to users.
Jessica Livingston

*

If you only look at certain dimensions, you may conclude the FortuneCookies are better.

They are shorter and not having an author's name seems to make them more general.

But all things considered, Cartographs are 100x better.

*

Defining Cartographs
====================

> Cartographs are easy to falsify advice derived from data.

*

Unlike FortuneCookies, Cartographs need to be backed by a large dataset.

Example
=======

In 2009 I wrote:
 https://breckyunits.com/twelve-tips-to-master-programming-faster.html I wrote

> ü•† to master programming, it might take you 10,000 hours of being actively coding or thinking about coding.

Ten years later, I now have the data to write:
 https://github.com/breck7/30000hours gathering data

> üó∫Ô∏è The programmers I respect the most, without exception, all practiced more than 30,000 hours^hours.

Even though the message is the same, the latter introduces a dataset to the problem and is instantly testable.

*

Cartographs can't just be the inclusion of a dataset. They need testability.

Without the testability Munger's quote would be a FortuneCookie:

> ü•† I've met hundreds of wise people who read all the time

That's not the clearest advice.

It certainly says that reading all the time won't rule out success, but it provides no guidance as to whether it is a necessary thing.

It's ambiguous if he also knows of wise people who don't read all the time (we know from the real quote that he doesn't).

*

Sometimes you see FortuneCookies evolve into Cartographs, where an advisor hasn't quite made it instantly testable yet but is proposing a way for the reader to test:

üó∫Ô∏è If you look at a broad cross-section of startups -- say, 30 or 40 or more; which of team, product, or market is most important?...market is the most important factor in a startup's success or failure.
Marc Andreessen

*

Coming up with great Cartographs is hard.

Like a good Proof of Work algorithm, Cartographs are hard to generate but easy to test.

I know who Charlie Munger is, so I know he's probably met thousands of "wise people". All it would take would be for me to find just a single one that didn't read all the time to invalidate his advice. But I can't.

I know who Jessica Livingston is and I know she's familiar with thousands of startups and I just need to find one who regrets spending so much time talking to users. But I can't.

*

If you have great experience, I urge you to not put it out there as FortuneCookies, but chew on it until you can form it into a Cartograph.

These are the most valuable contributions to our common blockchain.

*

My back of the envelope guess is that 99.9% of advice is written in FortuneCookies.

FortuneCookies are valuable for changing your perspective.

FortuneCookies are good for ideating.

Nothing wrong with FortuneCookies.

Just worth a lot less than Cartographs.

*

Mistakes happen when people treat FortuneCookies like Cartographs.

Bad advice is a mistake on the reader's part, not the writers.

Most "bad advice" has a famous person on one end, simply because they are constantly hounded for advice.

Mostly they'll give out FortuneCookies, since new Cartographs take time to create.

*

When you can quickly identify the difference between FortuneCookies and Cartographs, you're less likely to make the mistake of blindly betting on FortuneCookies.

It's safe to use FortuneCookies for ideating but not for decision making.

Cartographs you can bet on.

‚ÅÇ

Notes
=====

^hours: There are a lot of programmers who have 10,000 hours of experience that I respect a lot and enjoy working with, but the ones I study the most are the ones who stuck with it (and also just lucky enough to live long lives).

Built with Scroll v130.1.1
