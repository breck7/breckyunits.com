{
	"1317054733": {
		"Title": "ack and ackmate",
		"Essay": "So one common problem I have is writing code at a macro level---refactoring things in multiple files. Notepad++ used to make this easy with it's fast and powerful find/replace in folder feature. Textmate's built in find/replace in project is painfully slow.\r\n\r\nGrep & Sed don't cut it either. I've been using some custom written perl scripts for my needs. But today I discovered <a href=\"http://betterthangrep.com/\">ack & AckMate</a>. Problem solved. Really tight integration with TextMate (though the default 4 key shortcut is terrible--need to change that).\r\n\r\nThis is probably something I would have learned faster had I been doing more pair programming with senior devs."
	},
	"1316732606": {
		"Title": "nohup and disown",
		"Essay": "Just read a good guide on how to keep commands running when you exit ssh:\r\n\r\n<a href=\"http://playingwithsid.blogspot.com/2007/10/disown-nohup-bash-commands.html\">Disown, nohup : Bash Commands</a>.\r\n\r\nBasically:\r\n\r\n> nohup ./mycommand &\r\n\r\nAdding the ampersand to the end of a command in Nix executes the command in the background and gives you back your shell. However, if you quit your terminal the process will be killed. The nohup command takes care of that. \r\n\r\nWhat is nohup? It's another obfuscated Nix low level utility that is an abbreviation for \"No Hangup Signal\", in other words: if the terminal sends a hangup signal, normally that kills all running processes, but this says ignore that.\r\n\r\n<a href=\"http://en.wikipedia.org/wiki/Nohup\">More on nohup.</a>"
	},
	"1316062820": {
		"Title": "New shortcuts",
		"Essay": "Gmail:\r\n\r\ngi - go to inbox\r\nc - compose\r\nj/k - go up and down, enter go to a page.\r\ngt - go to sent\r\n\r\nMac:\r\nctrl+a - home/start of line\r\nctrl+e - end"
	},
	"1316021279": {
		"Title": "Apache, SSL and self signed certificates",
		"Essay": "Just read an excellent guide about <a href=\"http://www.akadia.com/services/ssh_test_certificate.html\">how to create self-signed certificates.</a>\r\n\r\nHere's what it boils down to:\r\n<pre>\r\n# The cool thing about SSL is it's just 2 text files. A public key and a private key.\r\n# They have a \"pem\" and a \"crt\" extension, but they are just plain text. Neat. \r\n\r\n# Okay, first step is to create a private key \"pem\" file.\r\n# every time you run this the random output pem file will be different:\r\nopenssl genrsa -des3 -out private_key.pem 1024\r\n# (enter passphrase)\r\n\r\n# Next, generate a \"signing request\".\r\nopenssl req -new -key private_key.pem -out private_key_certificate_signing_request.csr\r\n# (for common name enter the full domain name:\r\n# (the extra options aren't necessary--just hit enter)\r\n\r\n# Next remove the password from the private_key. Otherwise you'd have to enter\r\n# that password at all sorts of inconvenient times.....be careful because\r\n# if someone gets this unencrypted ket, you'll need to get a new cert..so make your pem readable\r\n# only by root!\r\ncp private_key.pem private_key.pem.original\r\nopenssl rsa -in private_key.pem.original -out private_key.pem\r\n\r\n# now you can generate your public self signed certificate:\r\nopenssl x509 -req -days 365 -in private_key_certificate_signing_request.csr -signkey private_key.pem -out self_signed_public_certificate.crt\r\n\r\n# now copy the private key (pem file) and the public key ( crt file ) to your web server.\r\nmkdir /etc/httpd/certs\r\ncp self_signed_public_certificate.cert /etc/httpd/certs\r\ncp private_key.pem /etc/httpd/certs\r\n# you can delete the CRT file. you don't need that crap anymore. you got the cert/public key and the pem/private key. thats all you need\r\nrm private_key_certificate_signing_request.csr\r\n\r\n\r\n# if you don't have mod_ssl installed you need to install it. on fedora:\r\nyum install mod_ssl\r\n\r\n#now edit the apache config to let apache with mod_ssl know where the keys are:\r\nSSLEngine on\r\nSSLCertificateFile /etc/httpd/certs/self_signed_public_certificate.crt\r\nSSLCertificateKeyFile /etc/httpd/certs/private_key.pem\r\n</pre>"
	},
	"1315959061": {
		"Title": "EC2 Command Line Tools",
		"Essay": "Step 1. Download them. http://aws.amazon.com/developertools/351\r\n\r\nStep 2. Set Java path in your .bash_profile:\r\n\r\n> export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home/\r\n\r\nStep 3. test Java path is correct:\r\n\r\n> $JAVA_HOME/bin/java -version \r\n\r\nStep 4. set ec2 path in your .bash_profile:\r\n\r\n> export EC2_HOME=/Users/breck/Downloads/ec2-api-tools-1.4.4.1\r\n> export PATH=$PATH:$EC2_HOME/bin \r\n\r\nStep 5.\r\n"
	},
	"1315609266": {
		"Title": "zip a directory in linux",
		"Essay": "> zip -r backup mydir/\r\n\r\n> zip -r backup ."
	},
	"1315255596": {
		"Title": "Recursive Sed",
		"Essay": "As far as I can tell, sed doesn't have a recursive mode. Here's a little script that uses perl to simulate a recursive sed:\r\n\r\n> #!/bin/bash\r\n> perl -e \"s/$1/$2/g;\" -pi $(find . -type f)\r\n\r\nI put this in a file named ~/rsed\r\n\r\nThen in my .bash_profile:\r\n\r\n> alias rsed=\"~/rsed\"\r\n\r\nNow I can use it like so:\r\n\r\n> rsed old new"
	},
	"1314912731": {
		"Title": "netstat",
		"Essay": "Every wonder what's listening on what ports?\r\n\r\n> netstat -lp"
	},
	"1313597303": {
		"Title": "Bash History",
		"Essay": "Understanding and mastering bash history can:\r\n\r\n1. Save you a lot of time, keystrokes, and errors.\r\n2. Allow you to easily create shell scripts for common tasks (such as setting up a server).\r\n\r\nHere's a terrific guide on using <a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">Bash History effectively</a>."
	},
	"1313519187": {
		"Title": "Amazing SSH Tricks",
		"Essay": "Just read an article that contains some <a href=\"http://blogs.perl.org/users/smylers/2011/08/ssh-productivity-tips.html\">amazing SSH tricks.</a>"
	},
	"1313252370": {
		"Title": "ngrep for packet monitoring",
		"Essay": "I just came across a neat command line tool, ngrep, via this <a href=\"http://www.coderholic.com/invaluable-command-line-tools-for-web-developers/\">site</a>.\r\n\r\nSample usage:\r\n\r\n> ngrep -q -W byline \"^(GET|POST) .*\""
	},
	"1312916840": {
		"Title": "Basic Linux Monitoring",
		"Essay": "Show memory usage:\r\n\r\n> free -m\r\n\r\nAdd this to your bash_profile:\r\n\r\n> alias free=\"free -m\"\r\n\r\n> top\r\n\r\nShow all processes\r\n\r\n> ps -a\r\n\r\nDisk free space:\r\n\r\n> df"
	},
	"1312829719": {
		"Title": "Creating a bootable Linux USB disk on Mac",
		"Essay": "- Download the ISO\r\n- Convert iso to img on terminal:\r\n\r\n> hdiutil convert -format UDRW -o ~/path/to/new.img ~/path/to/source.iso\r\n\r\n- Open Disk Utility. Right click the drive and click Information, then note the drive path (disk1 or disk2 for example)\r\n- Right click the Disk and click Unmount\r\n- Back in terminal:\r\n\r\n> sudo su root\r\n> dd if=/path/to/new.img of=/dev/rDISKNUMBER bs=1m\r\n\r\nWhere DISKNUMBER = disk1 or disk2 for example. Add that leading \"r\".\r\n\r\n> Back in Disk Utility, unmount/eject the disk.\r\n\r\nDone!"
	},
	"1312417196": {
		"Title": "Notepad++ HAML Syntax Highlighting and other custom extension mapping",
		"Essay": "I want my HAML files to have PHP(or Ruby) syntax highlighting. \r\n\r\nSettings > Style Configurator\r\n\r\nThen click php and under \"user ext\" (in the bottom left) add haml"
	},
	"1312395808": {
		"Title": "Mac Terminal Cursor Trick",
		"Essay": "If you hold the \"option\" key while using the Mac terminal you can use your mouse and click on where you want the cursor to go. This comes in handy if you mistype a command and don't want to retype the whole thing. It also kind of negates the need for a \"home\" key on the terminal."
	},
	"1312044120": {
		"Title": "Apache Conf and Htaccess Examples",
		"Essay": "Configuring Apache can be a pain. I'm going to try and collect links to great resources. The official docs are good, but they really need to add commenting so people can expand upon the resources available.\r\n\r\n<a href=\"http://www.evolt.org/ultimate_htaccess_examples\">http://www.evolt.org/ultimate_htaccess_examples</a>"
	},
	"1311812311": {
		"Title": "Fix for \"selinux 3.82\" stuck while installing Ubuntu from USB Drive",
		"Essay": "If you are installing Ubuntu from USB and are getting stuck at the \"SELINUX 3.82\" screen, you'll need to edit the selinux/selinux.cnf file on the USB stick and comment out the \"vesamenu.c32\" line, and remove the \"ui\" from the last line."
	},
	"1309448821": {
		"Title": "My Programming Setup",
		"Essay": "Here's my setup. This is kind of for my reference but you can also check it out if you're interested.\r\n\r\n- Macbook Air. 4GB. 256GB HD.\r\n- VMWare Fusion almost solely to run Notepad++\r\n- In Fusion I removed the Apple+W shortcut they map by default. Also, I map the Apple Key to the windows Ctrl key and the Mac control key to the Windows Key.\r\n- I configure Notepad++ to use 2 spaces instead of tabs.\r\n- I run Fusion in Unity mode and have the Windows taskbar at the bottom of the screen.\r\n- I make the Mac tray pretty small at the bottom of the screen and set it to disappear.\r\n- I run Cinch on my Mac to get the next drag and drop for side by side comparison function that comes with Windows 7.\r\n- I run Dropbox on the Mac. I share a folder using Fusion to have access to it in Windows.\r\n- I disable network access on the Windows virtual machine so I don't have to worry about viruses etc on that guy.\r\n- I enabled a firmware password on my macbook.\r\n- I add a lot of things to my bash_profile on the mac and pretty much always have at least 1 terminal window open.\r\n- I use textmate on the mac occasionally but try to do all my work in Notepad++.\r\n- I run MAMP on the Mac and WAMP on the WinVM.\r\n- I bump up the font size on a lot of things like terminal etc.\r\n- I go to \"Keyboard\" on the Mac and enable function keys. That way F1 works like you'd expect and you have to hit Fn+F1 to adjust the screen brightness.\r\n\r\n\r\n"
	},
	"1309229322": {
		"Title": "What Happens When you Open a 1.7 GB text file?",
		"Essay": "I downloaded the Verisign Master .com TLD zone file which weighs in at a hefty 1.7 GB. What happens when I open it with different programs on my Windows 7 Samsung netbook?\r\n\r\nWith Windows Notepad:\r\n\r\n> You quickly get a \"File is too large. Open with a different text editor.\" message. Graceful <b>FAIL</b>\r\n\r\nWith Microsoft Wordpad:\r\n\r\n> Immediately got a \"Not Responding\". On the status bar it says \"3% complete\" but 3 minutes later it hasn't changed. I'm going to go ahead and CtrlAltDelete this one. Disgraceful <b>FAIL</b>.\r\n\r\nWith Notepad++:\r\n\r\n> \"File is too big\" error. Graceful <b>FAIL</b>.\r\n\r\nVIM in Cygwin:\r\n\r\n> It appears frozen.\r\n\r\nI will continue this post at a later date.\r\n\r\n\r\n\r\n"
	},
	"1306257695": {
		"Title": "Wildcard Subdomains with GoDaddy",
		"Essay": "Just create a new A Record with * as the host and your IP in the points to field."
	},
	"1302737806": {
		"Title": "Quickly Set up a Web Proxy Server",
		"Essay": "Sometimes when abroad it becomes necessary to route your internet traffic through a proxy.\r\n\r\nHere's a great article that shows how:\r\n<a href=\"http://articles.slicehost.com/2009/1/6/ssh-socks-proxy\">http://articles.slicehost.com/2009/1/6/ssh-socks-proxy</a>.\r\n\r\nI also recommend the QuickProxy Firefox addon which lets you quickly toggle the proxy on and off."
	},
	"1302606972": {
		"Title": "A few new Tricks in Notepad++",
		"Essay": "I've been on the road for a few months programming on a Windows 7 Samsung netbook. (I didn't want to bring the Macbook with me and risk breaking it or worse). \r\n\r\nThe one thing I love about Windows is Notepad++. Sorry Textmate, you just can't compete.\r\n\r\nHere are some things I'm using a lot more now in Notepad++:\r\n\r\n- Bookmarks. Hit Ctrl+F2 to set a bookmark on any line of code and then hit F2 to jump between bookmarks. Shift+F2 goes back a bookmark.\r\n- SourceCookifier. This is a neat plugin that lets you jump to the definition of a function by hitting Ctrl+Shift+Enter. This is one feature from IDEs that I missed. It also provides a nice sidebar with a breakdown of your code(functions, vars, etc.). \r\n- FileSwitcher. A plugin that lets you hit Ctrl+Shift+o and then just type the name of the file you want to work on. Much quicker way to switch files than clicking or ctrl tabbing.\r\n- Goto. Ctrl+G lets you jump to a line number quick. I've used this in the past but am using it more often now.\r\n- Column Editor. Pretty handy sometimes.\r\n- Automation PHP Plugin. F9 to run your script. Great for quickly testing small sections of code. \r\n"
	},
	"1294859631": {
		"Title": "RVM Quick Reference",
		"Essay": "Return to the Mac OS X default Ruby install:\r\n\r\n> rvm system\r\n\r\nSwitch to Ruby 1.9.2:\r\n\r\n> rvm 1.9.2\r\n\r\nCreate a new gemset:\r\n\r\n> rvm gemset create rails3\r\n\r\nSwitch to newly created gemset:\r\n\r\n> rvm 1.9.2@rails3\r\n\r\nInstall rails 3 on new gemset:\r\n\r\n> gem install rails -v 3.0.3\r\n\r\nReturn to default ruby install:\r\n\r\n> rvm system\r\n\r\nInstall a new version of Ruby:\r\n\r\n> rvm install 1.9.2"
	},
	"1294169376": {
		"Title": "Forward a port on a remote server to your local machine with an SSH Reverse Tunnel",
		"Essay": "Say you are running a web server locally and want to show it to someone else remotely.\r\n\r\nYou have a few ways to do this:\r\n\r\n1. Provide your local IP address to the person.\r\n2. Setup DNS to point a domain to your local IP.\r\n\r\nBut what if your local computer is behind a NAT and you don't want to configure port forwarding on your router?\r\n\r\nOne option if you have a publicly facing server already is to create a reverse SSH tunnel with that server. This allows you to forward a port on that server to a port on your local server.\r\n\r\nFor instance, on my Mac OS X machine I open terminal and type this command:\r\n\r\n> ssh -nNT -R 3333:localhost:3333 username@yourdomain.com\r\n\r\nThis will connect to my server (yourdomain.com), and forward traffic from port 3333 on that server to my local machine. Now I can tell someone to go to yourdomain.com:3333 and that would be the equivalent of them going to localhost:3333.\r\n\r\nNotes:\r\nMake sure to add a rule to your IPTables config to allow inbound traffic to port 3333."
	},
	"1289930923": {
		"Title": "Features I Miss from Notepad++ in Textmate",
		"Essay": "Here are a few things I really miss from Notepad++:\r\n\r\n- When you doubleclick a word in Notepad++, all occurrences of that word are highlighted in green. \r\n\r\n- Notepad++ has great autocompletion. Once you type a word in a document, that word is added to the autocompletion list. Autocompletion drops down inline too which is great.\r\n\r\nIf anyone nows how to replicate these things in Textmate please let me know! Thanks."
	},
	"1288825550": {
		"Title": "Git ignore a file that's in the repo",
		"Essay": "Let's say you've got a file that's checked in like environment.rb that you want to edit for your local machine only and don't want to push the changes to your repository. It's easy, just do:\r\n\r\n> git update-index --assume-unchanged filepath\r\n\r\nand to reverse:\r\n\r\n> git update-index --no-assume-unchanged filepath\r\n\r\n<a href=\"http://www.pagebakers.nl/2009/01/29/git-ignoring-changes-in-tracked-files/\">Learn more here.</a>"
	},
	"1288748539": {
		"Title": "Adjusting to a Mac",
		"Essay": "For the third time in my life I've gotten a Macbook. The previous two times I returned them. I'm hoping the third time is a charm.\r\n\r\nAfter a week I'm finally starting to get used to it. I'm starting to really customize it and that seems to make all the difference. I've removed nearly everything from the dock, added a bunch of things to my bash profile, and a friend at work gave me a crash course in Textmate.\r\n\r\nI've downloaded a program called <a href=\"http://www.irradiatedsoftware.com/sizeup/\">Sizeup</a>, which not only emulates the awesome \"Snap\" feature of Windows 7, but in fact is even better. It gives you the left/right 50% snap feature just like in Win7, but also lets you snap things into top/bottom and even snap things into quadrants. Pretty nice software.\r\n\r\nFirefox is my favorite of the 3 browsers on the Mac. I loved Chrome on Windows because it was so fast, but this Air is so blazing fast that running Firefox or Chrome on Mac makes little difference.\r\n\r\nI've added the Secret Preferences menu and turned \"show all hidden files and folders\" on. I hate not seeing everything in a folder. \r\n\r\nI created an alias \"dsdelete\" to quickly recursively delete DS_Store hidden files (helpful when zipping folders for sharing). \r\n\r\nI learned the \"open .\" command and changed the terminal color scheme. \r\n\r\nI installed RubyMine and Web Developer Toolbar and Tamper Data and Charles and Dropbox. I'm still trying out VMWare Fusion and haven't decided if I want it yet.\r\n\r\nI've slowly gotten used to the keyboard. I tried spaces but have turned it back off for now. Expose I hardly use yet.\r\n\r\nAll in all, I'm really enjoying the speed, instant on, the light weight of the computer, Ruby on a Mac (doing Rails dev on Windows is a pain), having a real terminal(cygwin is great, but native is better), and the fact that 50% of my CPU isn't dedicated to fighting viruses. I'm still developing slower on this machine but hoping that my speed will improve with time.\r\n\r\nI'd say the odds at this point are 60-40 in favor of me sticking with it this time."
	},
	"1288388448": {
		"Title": "Remove all DS_Store files recursively",
		"Essay": "> find . -type f -name \".DS_Store\" -exec rm {} \\;"
	},
	"1284513372": {
		"Title": "Windows 7 Hosts File",
		"Essay": "<nomarkdown>\r\nThe file is located at:\r\n\r\n> windows/system32/drivers/etc/host\r\n\r\nMac hosts file:\r\n\r\n> /private/etc/hosts\r\n"
	},
	"1284513347": {
		"Title": "Rubyful Soup",
		"Essay": "<nomarkdown>\r\nI was a big fan of BeautifulSoup in Python and was excited to see a Ruby port(http://www.crummy.com/software/RubyfulSoup/).\r\n\r\nSadly it's no longer being maintained.\r\n\r\nTo get v1.0.4 working with Ruby 1.9.2, I had to make the following changes to the rubyful_soup.rb file in my gems directory:\r\n\r\nLine 19 - comment out 'require 'jcode''\r\n\r\nLine 233 - remove the colon"
	},
	"1284399453": {
		"Title": "VIM and Rails",
		"Essay": "<a href=\"http://biodegradablegeek.com/2007/12/using-vim-as-a-complete-ruby-on-rails-ide/\">Check out this guide.</a>\r\n<nomarkdown>\r\nfiletype on  \" Automatically detect file types.\r\nset nocompatible  \" We don't want vi compatibility.\r\n\r\n\" Add recently accessed projects menu (project plugin)\r\nset viminfo^=!\r\n\r\n\" Minibuffer Explorer Settings\r\nlet g:miniBufExplMapWindowNavVim = 1\r\nlet g:miniBufExplMapWindowNavArrows = 1\r\nlet g:miniBufExplMapCTabSwitchBufs = 1\r\nlet g:miniBufExplModSelTarget = 1\r\n\r\n\" alt+n or alt+p to navigate between entries in QuickFix\r\nmap <silent> <m-p> :cp <cr>\r\nmap <silent> <m-n> :cn <cr>\r\n\r\n\" Change which file opens after executing :Rails command\r\nlet g:rails_default_file='config/database.yml'\r\n\r\nsyntax enable\r\n\r\nset ruler  \" Ruler on\r\nset nu  \" Line numbers on\r\nset ruler  \" Ruler on\r\nset nu  \" Line numbers on\r\nset nowrap  \" Line wrapping offset nowrap  \" Line wrapping off\r\n\r\nset timeoutlen=250  \" Time to wait after ESC (default causes an annoying\r\nset ts=2  \" Tabs are 2 spaces\r\n\r\nset laststatus=2  \" Always show status line."
	},
	"1284138524": {
		"Title": "PHPUnit Filter Option",
		"Essay": "Say you are running PHPUnit from the command line and want to run just a specific test as opposed to a whole class of tests.\r\n\r\nFor example, say you have a tests.php file that contains a FileWriter_Test_Class with a test method named testFileWriter that you want to run.\r\n\r\nDo this:\r\n\r\n> phpunit --filter testFileWriter FileWriter_Test_Class tests.php"
	},
	"1284065402": {
		"Title": "Kill a Detached Rails Webrick Server",
		"Essay": "From your rails app's root:\r\n\r\n> cat tmp/pids/server.pid\r\n\r\n> kill -9 {pid}"
	},
	"1283795300": {
		"Title": "Cygwin SSH Client Keep Alive",
		"Essay": "<nomarkdown>\r\nAdd this to your /etc/defaults/etc/ssh_config file to prevent SSH servers from disconnecting you after inactivity:\r\n\r\n> ServerAliveInterval 60\r\n\r\n\r\n"
	},
	"1283657196": {
		"Title": "A Pretty Picture",
		"Essay": "<img src=\"ca.png\">\r\n<pre>\r\n<style>\r\nbody {\r\nmargin: 0px;\r\n\tpadding: 0px;\r\n\ttext-align:right;\r\n}\r\ndiv {\r\n\theight: 1px;\r\n\twidth:1px;\r\n\tdisplay:inline-block;\r\n}\r\n</style>\r\n<table cellpadding=0 cellspacing = 0>\r\n<?php\r\n// http://php.net/manual/ja/function.base-convert.php\r\nfunction unfucked_base_convert ($numstring, $frombase, $tobase) {\r\n\r\n $chars = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n   $tostring = substr($chars, 0, $tobase);\r\n\r\n   $length = strlen($numstring);\r\n   $result = '';\r\n   for ($i = 0; $i < $length; $i++) {\r\n       $number[$i] = strpos($chars, $numstring{$i});\r\n   }\r\n   do {\r\n       $divide = 0;\r\n $newlen = 0;\r\n       for ($i = 0; $i < $length; $i++) {\r\n  $divide = $divide * $frombase + $number[$i];\r\n           if ($divide >= $tobase) {\r\n               $number[$newlen++] = (int)($divide / $tobase);\r\n               $divide = $divide % $tobase;\r\n           } elseif ($newlen > 0) {\r\n $number[$newlen++] = 0;\r\n           }\r\n       }\r\n       $length = $newlen;\r\n       $result = $tostring{$divide} . $result;\r\n }\r\n   while ($newlen != 0);\r\n   return $result;\r\n}\r\n\r\nfunction print_ca($number)\r\n{\r\n\t\r\n\t$digits = str_split(unfucked_base_convert($number,10,2));\r\n\t\r\n\tforeach ($digits as $digit)\r\n\t{\r\n\t\t?><div style=\"background:#<?=($digit ?\"000\":\"fff\")?>;\"></div><?php\r\n\t}\r\n\techo \"<div style='background:red;' title='$number'></div><br>\";\r\n}\r\n\r\nfor ($x = 1; $x < 300; $x++)\r\n{\r\n\t$str = \"1\";\r\n\t$z = $x;\r\n\twhile ($z)\r\n\t{\r\n\t\t$str .= \"0\";\r\n\t\t$z--;\r\n\t}\r\n\tprint_ca($str);\r\n}\r\n</pre>"
	},
	"1283627386": {
		"Title": "Augmented Gitignore",
		"Essay": "<nomarkdown>\r\n.bundle\r\ndb/*.sqlite3*\r\nlog/*.log\r\n*.log\r\ntmp/**/*\r\ntmp/*\r\ndoc/api\r\ndoc/app\r\n*.swp\r\n*~\r\n.DS_Store\r\n\r\n<a href=\"http://railstutorial.org/chapters/beginning#sec:adding_and_committing\">Source</a>"
	},
	"1280510661": {
		"Title": "Windows Flush DNS",
		"Essay": "Open cmd.exe.\r\n\r\nRun:\r\n\r\n> ipconfig /flushdns"
	},
	"1277849559": {
		"Title": "Insert a line of text to the top of a file",
		"Essay": "If you have a massive text file you want to add a line to without opening the file, here's a quick solution:\r\n\r\n> sed -e '1i\\text_to_insert' -i file.txt\r\n\r\n"
	},
	"1272417738": {
		"Title": "wget don't save file",
		"Essay": "> wget -O /dev/null http://address.com"
	},
	"1270943514": {
		"Title": "ls color scheme",
		"Essay": "<nomarkdown>found this <a href=\"http://cygwin.com/ml/cygwin/2002-06/msg00594.html\">helpful color scheme</a> for ls. toss in your bash_profile.\r\n\r\n<blockquote>\r\nalias ls=\"ls --color=auto\"\r\nLS_COLORS=\"di=31;1:ln=36;1:ex=31;1:*~=31;1:*.html=31;1:*.shtml=37;1\"\r\nexport LS_COLORS\r\n</blockquote>"
	},
	"1270936782": {
		"Title": "Dump MySQL schema only",
		"Essay": "I found this command to <a href=\"http://www.postal-code.com/binarycode/2008/01/21/mysqldump-dumping-just-the-schema/\">dump just the schema</a>.\r\n\r\n<blockquote>mysqldump -u root -pmypassword test_database --no-data=true --add-drop-table=false > test_dump.sql  </blockquote>\r\n\r\nYou can then <a href=\"http://breckyunits.com/code/how_to_load_a_sql_file_into_mysql\">load the file easily</a>."
	},
	"1270935201": {
		"Title": "gca alias for faster git",
		"Essay": "<nomarkdown>\r\nOne of my most frequent commands is:\r\n\r\n<blockquote>git commit -am \"message\"</blockquote>\r\n\r\nI made a simple <a href=\"http://breckyunits.com/code/use_aliases_to_save_time\">alias</a> to save keystrokes:\r\n\r\n<blockquote>alias gca=\"git commit -am \"</blockquote>"
	},
	"1270932546": {
		"Title": "Recursive ls",
		"Essay": "Add the <code>-R</code> option to <code>ls</code> to recursively list the contents of a directroy."
	},
	"1270874165": {
		"Title": "vim macros",
		"Essay": "<nomarkdown>Let's say you want to add comments to your php functions following the conventional format:\r\n\r\n<blockquote>/**\r\n* Returns the sum of 2 variables.\r\n*\r\n* @param int $a\r\n* @param int $b\r\n* @return int $sum\r\n*/\r\nfunction sum($a, $b)\r\n{\r\n $sum = $a + $b;\r\n return $sum;\r\n}\r\n</blockquote>\r\n\r\nYou can record a macro to help speed up the commenting process.\r\n\r\nJust type <code>q</code> followed by the letter you want to assign the macro to (in this case let's use <code>c</code>), type your keystrokes, then hit <code>q</code> again to stop recording. Now hit <code>c</code> to replay your macro.\r\n\r\nYou can overwrite the macro by repeating the above steps.\r\n\r\nBonus tip:\r\n\r\n<b>Bookmarks</b>.Use <code>m</code> + a letter to create a bookmark in vim. Then use the backtick plus the letter to return to the location.\r\n\r\n<b>Keyword completion</b>. Use <code>Ctrl+N</code> to complete a word.\r\n\r\n\r\n\r\nNotes\r\n1. <a href=\"http://www.oreillynet.com/mac/blog/2006/07/more_vim_save_time_with_macros_1.html\">Vim macro tutorial</a>.\r\n2. <a href=\"http://jmcpherson.org/editing.html\">Another great vim resource.</a>\r\n\r\n"
	},
	"1270156314": {
		"Title": "pwd while in a symlink directory",
		"Essay": "to get the actual directory, run:\r\n\r\n> /bin/pwd"
	},
	"1269725872": {
		"Title": "Case sensitivity in MySQL table names and lower_case_table_names",
		"Essay": "<nomarkdown>On linux, filenames and directories are case sensitive. <code>file</code> and <code>File</code> are different files.\r\n\r\nOn Windows, filenames are not case sensitive. <code>file</code> and <code>File</code> are the same file.\r\n\r\nMySQL saves a database to disk. A \"database\" is saved in a directory, and each table is saved as a file in that folder.\r\n\r\nThus, say you transfer a database from Linux to Windows that has a table named \"userBookmarks\", this might cause a problem for you because MySQL on Windows will likely interpret it as \"userbookmarks\".\r\n\r\nThere's a setting in your my.cnf file called \"lower_case_table_names\".\r\n\r\nThe options are 0, 1, and 2.\r\n\r\n1 is the default, and you shouldn't need to change it.\r\n\r\nIf you change it to 0 on Windows, you might run into problems. If you change it to 2, it doesn't seem to do much.\r\n\r\nSo what's the solution? Try to avoid capital letters in table names (use _ instead of camel case). When you can't do that, write your code for the Linux database (ie \"select * from userBookmarks\"), and your queries should translate fine on Windows since Windows will convert that to \"select * from userbookmarks\".\r\n\r\n\r\n"
	},
	"1269547871": {
		"Title": "ANSI or ASCII and Unicode or UTF-8 and Newlines",
		"Essay": "<nomarkdown>The key things you need to know:\r\n\r\nANSI (aka ASCII) and UTF-8 (aka \"UnicodeTransformation Format\" or just \"Unicode\") are ways to encode text files into binary data.\r\n\r\nI'm simplifying things but actually what I'm leaving out is not important. There are basically 2 character sets: ASCII or ANSI and UTF8 or Unicode. It's probably easiest to just call them ASCII and Unicode.\r\n\r\nUnicode is the new guy, and is slowly replacing ASCII.\r\n\r\nThe main problem you'll run into with ASCII is line breaks. This isn't really an ASCII issue, it's a Windows issue but it often seems like it's an ASCII issue.\r\n\r\nWindows does \\r\\n, whereas Unicode just does \\n.\r\n\r\nHere's an experiment you can do using Notepad++ and Notepad.\r\n\r\nOpen Notepad++ and start a new document.\r\n\r\nType in:\r\n\r\n<blockquote>hello<br>world</blockquote>\r\n\r\nClick \"Edit\", \"EOL Completion\" and click \"Windows Format\" (if it's gray, that means it's already on Windows format). Now cut and paste the text into Notepad. You'll see that it comes out on 2 lines. All good right?\r\n\r\nNow go back to Notepad++ and click \"Edit\", \"EOL Completion\" and click \"UNIX Format\". Now cut and paste the text into Notepad. It's on 1 line, right?\r\n\r\nTada!\r\n\r\nNow when you're having line problems just use this nifty feature in Notepad++.\r\n\r\nNotes\r\n1. Okay so this article turned out to be about line breaks and not about character encoding. I blame ADD.\r\n2. <A href=\"http://vlaurie.com/computers2/Articles/characters.htm\">Cast of Characters- ASCII, ANSI, UTF-8 and all that</a>\r\n3. <a href=\"http://www.rapidintellect.com/AEQweb/mansub1.htm\">ANSI versus Unicode</a>"
	},
	"1269546681": {
		"Title": "The BASH Programming Language",
		"Essay": "I used to use Python, Ruby or even PHP to write backend programs that would automate things like server management tasks, development and editing tasks, deployment tasks, backup tasks, and so forth.\r\n\r\nThen I learned what is basically the BASH programming language, a language very similar to Python/Ruby/PHP etc., but is perfect for writing command line programs.\r\n\r\nHere's the core of what you need to know:\r\n\r\n<b>Use the .sh file extension</b>\r\n\r\nA BASH script should have the .sh extension, just as a Python script has the .py extension, a php script has the .php extension, and a Ruby script has the .rb extension.\r\n\r\n<b>Start your scripts with #!/bin/bash</b>\r\n\r\n> #!/bin/bash\r\n\r\nPHP scripts start with <?php. Bash scripts should start with #!/bin/bash. No closing tag necessary.\r\n\r\n<b>The echo statement</b>\r\n\r\nHere's your first bash script (name it hello.sh):\r\n\r\n> #!/bin/bash<br>\r\n> echo \"Hello World\"\r\n\r\nThe *echo* command prints a string and also a new line at the end.\r\n\r\n<b>Running your script</b>\r\n\r\nYour script must be **executable**. To make it executable, you need to change the <a href=\"http://breckyunits.com/code/fix_permission_problems_using_chmod\">file permissions</a>. This would make your hello.sh script executable:\r\n\r\n> chmod 777 hello.sh\r\n\r\nTo run your script, from the directory where your script is located, type this:\r\n\r\n> ./hello.sh\r\n\r\nThe \"./\" substitutes the current directory. In other words, typing\r\n\r\n> ./hello.sh\r\n\r\nis equivalent to typing the full path to the file such as this:\r\n\r\n> /home/breck/hello.sh\r\n\r\n<b>Command line Paramters</b>\r\n\r\nCommand line parameters are accessed with $1, $2, etc. Create a new script called hello2.sh. Put this in it:\r\n\r\n> #!/bin/bash\r\n> echo \"Hello World\"\r\n> echo $1\r\n> echo $2\r\n\r\nNow run your script like this:\r\n\r\n> ./hello2.sh hi breck\r\n\r\nIt should print this:\r\n\r\n> Hello World\r\n> hi\r\n> breck\r\n\r\nThe hi got stored in $1, and the breck got stored in $2.\r\n\r\n<b>Functions</b>\r\n\r\nFunctions are pretty simple and straightforward:\r\n\r\n> #!/bin/bash\r\n> echo \"Hello World\"\r\n> echo $1\r\n> echo $2\r\n> function hi_name {\r\n> echo \"hi\"\r\n> echo $1\r\n> }\r\n> hi_name $3\r\n\r\nNotice you don't need parenthesis and other junk. Name this file hello3.sh and run it with this:\r\n\r\n> ./hello2.sh hi breck conor\r\n\r\nIt should print this:\r\n\r\n> Hello World\r\n> hi\r\n> breck\r\n> hi\r\n> conor\r\n\r\nNotice what's going on with parameter passing and scope.\r\n\r\nThat's it for now. As you can see, BASH is a very clean, simple, yet powerful programming language. Get started with it slowly and gradually build up your skills with it."
	},
	"1269240910": {
		"Title": "Cygwin Error: Could not resolve hostname X: Non-recoverable failure in name resolution",
		"Essay": "I've been getting this error a lot in Cygwin on Windows 7:\r\n\r\n> Could not resolve hostname X: Non-recoverable failure in name resolution\r\n\r\nIt happens a lot when I run a deploy script or git push. Haven't found a solution yet, and am trying to track one down.\r\n\r\nThe problem is this bug is hard to reproduce. It happens only 5-10% of the time.\r\n\r\nEdit #1:\r\n<a href=\"http://technet.microsoft.com/en-us/library/bb727005.aspx\">Helpful article from Microsoft on Host Name Resolution</a>\r\n\r\nEdit #2:\r\nUpon closer examination, it seems this error only happens with ssh:\r\n\r\n> ssh: Could not resolve hostname X: Non-recoverable failure in name resolution\r\n\r\nThat's narrowed it down a bit but still no solution. Sadly because it only happens once or twice out of 10-20 times I run the \"ssh\" command, it's taking longer to pin down."
	},
	"1267900366": {
		"Title": "Plugins for Notepad++",
		"Essay": "Notepad++ is my go to editor.\r\n\r\nThe default plugins are great, but if you need more just visit <a href=\"http://sourceforge.net/apps/mediawiki/notepad-plus/index.php?title=Plugin_Central\">the notepad++ plugins list</a>.\r\n\r\nTo install a plugin:\r\n\r\n1. Download the zip file and unzip it.\r\n2. Copy the dll to your Program Files/Notepad++/Plugins folder.\r\n\r\nThe main plugin I've used so far is Explorer. I'll update this in the future with other ones.\r\n\r\nThat's it!"
	},
	"1267671573": {
		"Title": "More tips on using rsync to deploy your website",
		"Essay": "My post on <a href=\"http://breckyunits.com/code/use_rsync_to_deploy_your_website\">deploying a website using rsync</a> has gotten quite a few hits.\r\n\r\nI thought I'd add some more tips:\r\n\r\n- use the \"--delete\" option if you want to delete files on the destination directory that no longer exist in the source directory.\r\n- add \"$1\" after your options like this:\r\n> rsync -rvz$1\r\nThen you can easily do a DRY RUN. Just type:\r\n\r\n> ./deploy.sh n\r\n\r\nThe n will get substituted for $1.\r\n\r\n### Troubleshooting\r\n\r\nI've found a lot of times rsync appears to be copying the same files over and over.\r\n\r\nThere are a few things you can do to troubleshoot <a href=\"http://samba.anu.edu.au/rsync/FAQ.html\">when rsync recopies the same files</a>.\r\n\r\nThe options that I've found come in real handy are:\r\n\r\n1. The <b>i</b> option, which shows you why a file is being copied (all pluses means rsync thinks it doesn't exist in the destination; t means the times differ; s means the contents differ (?)).\r\n2. The <b>--modify-window=1</b> option. This lets you ignore differences in modified timestamps. You can set 1 to a high number to ignore large differences.\r\n"
	},
	"1267482243": {
		"Title": "Linux Go Back to Previous Directory",
		"Essay": "Just type:\r\n\r\n> cd -\r\n\r\nTo go back to the last directory you were in. Basically an \"undo\" for the cd command."
	},
	"1267138609": {
		"Title": "Should your source code be in one folder or should it be nested?",
		"Essay": "<nomarkdown>There are two ways to organize source code files for a project: flat or nested.\r\n\r\nHere's a simple example of a <b>flat</b> structure(1 directory, 4 files):\r\n<blockquote>\r\n<i>>myproject/</i>\r\n- index.php\r\n- theme.css\r\n- helper_functions.php\r\n- logo.png\r\n</blockquote>\r\nHere's an example of a <b>nested</b> structure(4 directories, 4 files):\r\n<blockquote>\r\n<i>>myproject/</i>\r\n- index.php\r\n<i>> styles/</i>\r\n-- theme.css\r\n<i>> images/</i>\r\n-- logo.png\r\n<i>> helpers/</i>\r\n-- helper_functions.php\r\n</blockquote>\r\nBoth of these structures can accomplish the same thing. Which is better?\r\n\r\nIf you've worked with me on any project before, you'll know I prefer flatter structures. I try to resist adding directories as much as possible (you always have to add them eventually, but I like to fight it to minimize this effect).\r\n\r\nI don't know why my gut tells me to minimize directories, so I thought I'd write about it and see if any rationale emerged.\r\n\r\n<h2>Benefits of a Flat Structure</h2>\r\n\r\n<b>Benefit #1 - Quicker access to files</b>\r\n\r\nI primarily edit files using Notepad++ on Windows 7 or vim. If you keep all your files in 1 directory, you can open them faster (\"Control+O\", type a few letters on Win 7, or just \"vim filename\"). So, a flat structure gives you quicker access to files. I've never timed this before, but am pretty positive it works.\r\n\r\n<b>Benefit #2 - Avoid file path issues</b>\r\n\r\nDealing with paths when working with a website is often the cause of careless bugs. If everything is in one directory, it makes it painless to include things on both the server side(include 'file.php';) and the client side ('src=\"script.hs\"'). Once you start nesting directories, it's easy to make mistakes.\r\n\r\n<b>Benefit #3 - Easier to bring people up to speed</b>\r\n\r\nWhen I join an in-progress project or use a new library, I like to try and wrap my head around the whole thing. I can't do that if I have to dig into different directories to see all the files. Why hide 50% of the project in subdirectories?\r\n\r\n<b>Benefit #4 - Avoid overwriting issues</b>\r\n\r\nOccasionally you'll have a structure like this:\r\n<blockquote>\r\n- index.php\r\n<i>> admin/</i>\r\n-- index.php\r\n</blockquote>\r\nYou might accidentally overwrite one index with the other, or edit one index when you think you're editing the other. Doesn't happen too often, but occasionally it can be annoying. By sticking everything in one directory, you don't run into that problem as much.\r\n\r\n<h2>Benefits of a Nested Structure</h2>\r\n\r\nOf course there are benefits to having multiple directories, otherwise this style wouldn't be so popular.\r\n\r\n<b>Benefit #1 - Looks more organized</b>\r\n\r\nIt's nice and neat to have your files tucked away into nicely labeled directories. \r\n\r\n<b>Benefit #2 - Easier for teams</b>\r\n\r\nIt can be easier to divide work between team members when things are in different directories. For instance, why should the designers need their images mixed in with backend files?\r\n\r\n<b>Benefit #3 - A directory with too many files becomes unwieldy</b>\r\n\r\nI'll admit, once you have more than some threshold of files in a directory, it can quickly become hard to manage. If the files are nearly all of the same type (say, php files), then it's not as bad. But once you have 20 php files, 3 javascript files, 15 images, 4 css files, 2 bash files, 3 readmes, and 45 text files, it might be time to split things up.\r\n\r\n\r\n<h2>My theory on why directories are bad.</h2>\r\n\r\nLess paths create an easier mental model. \r\n\r\nIf you walk into a messy room, it can be hard to create a mental model of the contents of that room. This is the equivalent to a file structure like the one below:\r\n\r\n<b>Bad</b>\r\n\r\n<blockquote>\r\n<i>>myproject/</i>\r\n- a_image.png\r\n- base_functions.php\r\n- dog.js\r\n- index.php\r\n- mike.png\r\n- names.csv\r\n- new_logo.jpg\r\n- test.php\r\n- xmlfunctions.php\r\n- zlib.js\r\n</blockquote>\r\nIt's a mess.\r\n\r\nIf you walk into a room where everything is put away(clothes in the dresser, books on a bookshelf, odds and ends in the drawers) it's easier and an improvement. A room organized like this looks like the file structure below:\r\n\r\n<b>Ok</b>\r\n\r\n<blockquote>\r\n<i>>myproject/</i>\r\n- index.php\r\n<i>> images/</i>\r\n-- a_image.png\r\n-- mike.png\r\n-- new_logo.jpg\r\n<i>> php/</i>\r\n-- base_functions.php\r\n-- test.php\r\n-- xmlfunctions.php\r\n<i>> scripts/</i>\r\n-- dog.js\r\n-- zlib.js\r\n<i>> data/</i>\r\n-- names.csv\r\n</blockquote>\r\nBut now you've introduced the problem that to access nearly anything, you have to \"open a drawer\". You also can't see everything all at once. \r\n\r\n<b>Best</b>\r\n\r\nThe optimal solution is to not put your stuff into drawers, but to:\r\n\r\n1. Remove as much stuff as possible.\r\n2. Put the remaining stuff out in the open in neats piles in separate parts of the room.\r\n3. If, and only if, you have a ton of the same type of thing, put those into their own drawer/cabinet.\r\n\r\nIf you apply this algorithm to a sample project, you might get something like a project I just made with <a href=\"http://github.com/breck7/uno\">PHPUno</a>\r\n\r\n<blockquote>\r\n<i>>dropdate/</i>\r\n<i>> - data/</i>\r\n-- 1\r\n-- 2\r\n-- ..\r\n-- 578\r\n- index.php\r\n- logo.png\r\n- sprites.png\r\n- style.css\r\n- uno_controller.php\r\n- uno_app.php\r\n- uno_models.php\r\n- uno_helpers.php\r\n</blockquote>\r\n\r\n<h2>Search, don't sort</h2>\r\n\r\nGmail has an adage \"search, don't sort\". I think it applies here. Directories are a form of sorting, while autocomplete(which is integrated into practically everything nowadays) is a form of searching. By sticking everything into one directory, you enable search. Create multiple directories, and you disable search.\r\n\r\n<h2>The Rule of Three</h2>\r\n\r\nHere's a simple rule of thumb to help you organize your folder structure better:\r\n\r\n- No folder in your project should have more than 3 subfolders.\r\n- There should not be more than 3 levels in any project.\r\n\r\nIn other words, the directory \"icon\" should never have a subdirectory in it. \r\n<blockquote>\r\n<i>>myproject/</i>\r\n<i>> images/</i>\r\n<i>>- icons/</i>\r\n</blockquote>\r\nThis means that any project should have at most 9 subdirectories."
	},
	"1266361432": {
		"Title": "Bug Workaround for JS Charts Error: Not enough data to display chart ",
		"Essay": "If you get this alert using JSCharts, here's a quick hack to fix it:\r\n\r\n> nullData = new Array( );\r\n> myChart.setDataArray(nullData,\"null\");\r\n\r\nAdd these 2 lines to your javascript.\r\n\r\nBasically, if the first data set has only 1 data point, JSCharts will fire the alert. If it has 0 or 2+ data points, it won't. This fix creates an empty data series which disables this alert."
	},
	"1265700249": {
		"Title": "Change the file owner or group in Linux",
		"Essay": "Change the owner of a file or folder:\r\n\r\n> chown newowner filename\r\n\r\nChange the group of a file or folder:\r\n\r\n> chgrp newgroup filenameorfoldername"
	},
	"1265475335": {
		"Title": "How to load a sql file into MySql",
		"Essay": "It's very simple thanks to <a href=\"http://breckyunits.com/code/write?post=1264563439\">pipes</a>.\r\n\r\n> mysql -u username -p < sqlfile.sql\r\n\r\nMake sure your sql file has a \"use database\" line."
	},
	"1265044016": {
		"Title": "Shortcut for switching to a Windows directory in Cygwin",
		"Essay": "In cygwin it can be a pain to change to a Windows directory like `C:\\Users\\breck\\Documents\\My Dropbox`.\r\n\r\nI made a small bash script called `wcd` that makes it easier.\r\n\r\n### wcd\r\n\r\n #!/bin/bash\r\n    echo $1\r\n    newpath=$(echo $1 | sed 's|\\\\|/|g' | sed 's|:||g' | sed 's|^C|/cygdrive/c|')\r\n    echo $newpath\r\n    cd \"$newpath\" \r\n\r\nThe echos are just for debugging--I'm kind of new to bash scripting. Feel free to remove.\r\n\r\nMake this file executable and add an alias into your bash_profile:\r\n\r\n    alias wcd=\"source ~/wcd\"\r\n\r\nNow you can just type(or actually copy/paste) something like this:\r\n\r\n wcd \"C:\\Users\\breck\\Documents\\My Dropbox\"\r\n\r\n...and that will take you to the Windows directory.\r\n\r\nNotes\r\n\r\n1. <a href=\"http://gist.github.com/291822\">wcd gist</a>."
	},
	"1264906475": {
		"Title": "Cygwin treats the Windows Clipboard like a file",
		"Essay": "In Linux every thing is a file. This is great because it means the Windows clipboard is a file too!\r\n\r\nWant to copy the current cygwin directory into your clipboard?\r\n\r\n> pwd > /dev/clipboard\r\n\r\nWant to print the contents of the clipboard?\r\n\r\n> cat /dev/clipboard\r\n\r\n\r\nNotes\r\n\r\n1. <a href=\"http://williammitchell.blogspot.com/2008/03/fun-with-cygwins-devclipboard.html\">Fun with Cygwin's /dev/clipboard</a>."
	},
	"1264816861": {
		"Title": "New tricks in Vim",
		"Essay": "I learned some new tricks with vim today.\r\n\r\n> 4G - Move to line #4\r\n\r\n> mb - Mark the current spot as point b\r\n> 'b - Go back to point b\r\n\r\n> vim file1 file2 - open 2 files at once\r\n\r\n> :e file - edit a different file\r\n\r\n> :split file - split the current window and edit a different file (vsplit for vertical split)\r\n\r\n> ctrl+w j/k - move down/up a window\r\n\r\n> :hide - hide the current window\r\n\r\n> :ls - show current buffers\r\n\r\nNotes\r\n\r\n1. [Vim Tips and Tricks](http://www.cs.oberlin.edu/~kuperman/help/vim/windows.html)"
	},
	"1264563875": {
		"Title": "Use cat to combine or print the contents of a file",
		"Essay": "Print the contents of a file:\r\n\r\n> cat filename.txt\r\n\r\nPipe the contents of the file to less, so you can view it one page at a time:\r\n\r\n> cat filename | less\r\n\r\nIn less, the 3 key commands are:\r\n\r\n- spacebar to go forward one page\r\n- b to go back one page\r\n- q to quit\r\n\r\nYou can also do regular expression searches like in vim: /regex (n to go to next match)\r\n\r\n\r\nAppend file1 to the end of file 2:\r\n\r\n> cat file1 >> file2\r\n\r\nCombine two files into a third file:\r\n\r\n> cat file1 file2 > file3\r\n\r\n"
	},
	"1264563439": {
		"Title": "Pipes, standard output and standard input",
		"Essay": "In linux, standard input refers to the stream of bits that come from your keyboard.\r\n\r\nStandard output refers to the stream of bits that appear on your screen(terminal).\r\n\r\nYou can change this around so that standard input comes from another source(say, a file) or so that standard output gets directed somewhere else (say, a file).\r\n\r\nFor example, say we wanted to email someone a file containing the contents of our home directory. We could do this:\r\n\r\n> ls ~ | vim -\r\n\r\nThis will pipe the output from the ls command to vim. You can then edit and save this file normally as you would in vim.\r\n\r\nThere's another type of pipe you could use for this example: greater than.\r\n\r\n> ls ~ > contents.txt\r\n\r\nThis will redirect the output to the contents.txt file.\r\n\r\nYou can also append output by using two greater than signs:\r\n\r\n> ls ~ >> some_file.txt\r\n\r\nAs you would expect, the less than sign can be used to direct a file as standard in.\r\n\r\n\r\nNotes\r\n\r\n1. <a href=\"http://www.amazon.com/gp/product/0672328380?ie=UTF8&tag=smartyounginv-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672328380\">Linux Phrasebook</a><img src=\"http://www.assoc-amazon.com/e/ir?t=smartyounginv-20&l=as2&o=1&a=0672328380\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\r\n2. <a href=\"http://ubuntuforums.org/showthread.php?t=713210\">pipe to vim</a>.\r\n\r\n\r\n\r\n\r\n"
	},
	"1264562575": {
		"Title": "Run multiple commands at once",
		"Essay": "Want to know how to run two or more linux commands sequentially? It's simple: use the semicolon ;.\r\n\r\nFor instance:\r\n\r\n> cd;ls\r\n\r\nThis will change the directory to your home directory, then list the contents. You can use as many semicolons as you wish.\r\n\r\nAnother option is to use && if you only want the next command to execute if the previous command executed successfully.\r\n\r\n> cd ~/myfiles; cp file.txt ~/backup/ && rm file.txt\r\n\r\nThis will only run the last command if the cp command executed successfully.\r\n\r\nYou can swap the && for || to run a command if the previous one fails.\r\n\r\n "
	},
	"1264265162": {
		"Title": "The only 5 git commands you need to know",
		"Essay": "What's the difference between a great programmer who acts cool around girls and a great programmer who does not use version control?\r\n\r\nNothing--they both don't exist!\r\n\r\nIf *every single great programmer* uses version control, why do some beginning programmers avoid it?\r\n\r\nBecause version control is made to seem intimidating. \r\n\r\nBut version control is actually very easy!\r\n\r\nIf you are new to version control, there are only 5 commands you need to memorize. Can you memorize 5 words? Of course you can.\r\n\r\nSo memorize these 5 words and you'll be practically an expert at version control:\r\n\r\n> init\r\n>\r\n> add\r\n>\r\n> status\r\n>\r\n> commit\r\n>\r\n> push\r\n\r\nIf you just start playing around with these 5 and only these 5 commands, you'll become a git master in no time. \r\n\r\nHere's a simple practice session you can follow to start getting good.\r\n\r\n### What is git?\r\n\r\nGit is a simple command line program like \"wget\" or \"vim\" that you install and use by typing commands. If you don't have git installed, try one of these commands:\r\n\r\n> yum install git-core\r\n>\r\n> apt-get install git-core\r\n>\r\n> sudo port install git-core\r\n\r\nLet's say you're creating a new website for your mom and want to use version control to do it.\r\n\r\n> mkdir moms_website\r\n>\r\n> cd moms_website\r\n>\r\n> git init\r\n\r\nThis creates a git repository. Now type:\r\n\r\n> ls -a\r\n\r\nDo you see the new \".git\" directory? That's the git repository. It's basically a folder that stores the whole history of your project. Now, when you type a git command, it will do something with the files in that folder. That's all that's really going on. You never need to go into that folder manually, I was just explaining what git is doing.\r\n\r\nNow, let's create a file and add it to your repository.\r\n\r\n> vim index.php\r\n>\r\n> Hello World\r\n>\r\n> :wq\r\n>\r\n> git status\r\n\r\nThis will show the presence of an untracked file, \"index.php\". Let's add this file.\r\n\r\n> git add index.php\r\n\r\nYou've now added the file to git, let's *commit* our changes.\r\n\r\n> git commit -m \"first commit\"\r\n\r\nNow you've made your first commit. \r\n\r\nThe last command you'll need is *push*. It works like this:\r\n\r\n> git push\r\n\r\nThat will upload your repository to an online host like github so that other people can collaborate.\r\n\r\nCreate a github account and follow the instructions for creating a new repository to test out this final command.\r\n\r\nThat's it! Those are the 5 commands you'll use over and over again. Master those and slowly you'll start learning a few other helpful git commands.\r\n\r\n#### Recap\r\n\r\n> git init\r\n>\r\n> git status\r\n>\r\n> git add *filename*\r\n>\r\n> git commit -m *\"your message about what you changed and why\"*\r\n>\r\n> git push"
	},
	"1264121864": {
		"Title": "Use scp to download a file from a server",
		"Essay": "You can easily grab a file off a server from the command line using secure copy:\r\n\r\n<blockquote>scp user@domain.com:/home/user/fileyouwant.txt fileyouwant.txt</blockquote>\r\n\r\nThis will download the file from your server to your local computer."
	},
	"1264019985": {
		"Title": "Clear screen in cygwin",
		"Essay": "Just hit ctrl+l"
	},
	"1264017151": {
		"Title": "Use sed to find and replace",
		"Essay": "<nomarkdown><a href=\"http://breckyunits.com/code/use_grep_to_search_multiple_files_at_once\">grep</a> is to find what sed is to replace.\r\n\r\nSay you noticed a few typos in a file. Say you typed imposible instead of impossible a few times in a file named \"stuff.txt\".\r\n\r\nYou can fix all occurrences using this one-liner:\r\n\r\n<blockquote>sed 's/imposible/impossible/g' stuff.txt</blockquote>\r\n\r\nOften it's more helpful to sed across multiple files.\r\n\r\n<blockquote>sed -i 's/1.0.1/\"1.0.1\"/g' *.php</blockquote>\r\n\r\nThat's one command I used to add quotes around 1.0.1, which I forgot to do. Alas, it's not recursive.\r\n\r\n\r\n\r\nNotes\r\n1. <a href=\"http://www.grymoire.com/Unix/Sed.html\">sed tutorial</a>.\r\n2. <a href=\"http://www.brunolinux.com/02-The_Terminal/Find_and%20Replace_with_Sed.html\">find and replace with sed</a>.\r\n3. <a href=\"http://linux.about.com/od/bgb_guide/a/gdebgb44t03.htm\">about.com on sed</a>.\r\n4. <a href=\"http://drupal.org/node/128513\">Very clear examples</a>."
	},
	"1263939267": {
		"Title": "Unix date command",
		"Essay": "Display the current unix timestamp:\n\ndate +%s\n\nHandy way to view it from the command line.\n"
	},
	"1263857274": {
		"Title": "Bash variables",
		"Essay": "<nomarkdown><blockquote>\r\n$ FIVE=5\r\n$ echo $FIVE\r\n5\r\n$ echo \"The number five is $FIVE\"\r\n</blockquote>\r\n<b>Variable scope</b>\r\n\r\nA shell script will launch a new shell that has a fresh scope.\r\n<blockquote>\r\n$ FIVE = 5\r\n$ vim myshellscript.sh\r\n#!/bin/bash\r\necho $FIVE\r\n$ ./myshellscript.sh\r\n</blockquote>\r\nBlank because the executed script doesn't affect the current shell. To make something affect the current shell, use the source command.\r\n\r\n<b>Export command.</b>\r\n\r\nUse the export command to change the scope of your variable to global for your shell.\r\n\r\nTo make a permanent global variable, add it to your .bash_profile like so:\r\n<blockquote>\r\nMY_NAME=breck; export MY_NAME\r\n</blockquote>\r\n<b>Accept input.</b>\r\n\r\nUse the read command to accept input.\r\n<blockquote>\r\necho \"What is 1+1?\"\r\nread ANSWER\r\necho \"Your answer is $ANSWER\"\r\n</blockquote>\r\n\r\n\r\nNotes\r\n1. <a href=\"http://steve-parker.org/sh/variables1.shtml\">Bash tutorial</a>\r\n2. <a href=\"http://www.mcsr.olemiss.edu/unixhelp/environment/env3db.html\">Another tutorial</a>.\r\n3. <a href=\"http://steve-parker.org/sh/variables2.shtml\">Bash parameters</a>"
	},
	"1263751154": {
		"Title": "How to fix an overwhelmed Gmail Accout",
		"Essay": "I have used the same Gmail address as my main email for over 5 years. \n\nSince then:\n<ul>\n<li>I've made dozens of other emails that forward to this address.</li>\n<li>I've signed up for hundreds of web apps and newsletters.</li>\n</ul>\nAs a result, my Gmail account gets inundated with email. Here are the stats:\n\n- 16,054 unread emails in my inbox\n- 29,236 emails total in my inbox\n- ?? who knows how many total emails in my archive\n- 3.683 GB of email\n- Using 49% of my Gmail quota\n\nMy Gmail account had become a firehose.\n\nThis was bad for two reasons.\n\nFirst, I started missing important emails. Not many, but a few per month. I had to write my own <a href=\"http://github.com/breck7/checkmygmail/\">simple Bayes filter</a> to find them. \n\nSecond, I couldn't do what most people do: use my inbox as a \"todo\" list. Most people immediately archive or delete an email when they're done with it. This is a great organizational trick. I wanted to do this again.\n\nI considered starting a new email address and giving it out to important people, but that seemed like it would make my life more complex.\n\nAs it turns out, the solution was simple.\n\n- Started liberally using the \"Spam\" button. I started clicking Spam on pretty much any type of mass email that wasn't very interesting to me. Will be interesting to see how this plays out.\n- Starred all the recent messages that I still had to deal with.\n- Archived all 29,000+ of my gmail messages at once.\n- Went back to the starred folder and moved the important messages to inbox.\n\n\nNotes\n1. Thanks to this site for telling me how to <a href=\"http://www.supriyadisw.net/2008/04/how-to-archive-all-your-gmail-messages\">archive all my gmail messages</a>.\n\n"
	},
	"1263401315": {
		"Title": "Seven aliases that can save you time",
		"Essay": "<nomarkdown>Add these to your .bash_profile to speed up common tasks:\r\n\r\nalias apr='sudo ./usr/sbin/apachectl restart' # restart apache\r\nalias www='cd /var/www/html/' # enter your root web directory\r\nalias hconf='vim /etc/httpd/conf/httpd.conf' # edit your apache config file\r\nalias eprof='vim ~/.bash_profile' # edit this file\r\nalias rprof='source ~/.bash_profile' # reload this file (after making edits)\r\nalias pconf='vim /etc/php.ini' # edit php.ini\r\nalias lsd=\"ls -l | egrep '^d'\" # list only directories"
	},
	"1263401184": {
		"Title": "List only directories using ls",
		"Essay": "the \"ls\" command lists all files and directories. What if you just wanted to list the directories?\n\n<blockquote>ls -l | egrep '^d'</blockquote>\n\nAdd this to your .bash_profile and now you can just type \"lsd\" when you want list only directories. Who said lsd was a bad thing?\n\n<blockquote>alias lsd=\"ls -l | egrep '^d'\"</blockquote>\n\nNotes\n1. Found this <a href=\"http://www.cyberciti.biz/faq/linux-list-just-directories-or-directory-names/\">tip here</a>."
	},
	"1263227710": {
		"Title": "Turn off bell in cygwin",
		"Essay": "The beep on tab completion in cygwin can be annoying. Here's how to turn it off:\n\n<blockquote>vim ~/.inputrc\n\n(Then add or uncomment this line)\n\nset bell-style none\n</blockquote>\n\nSave and restart your shell."
	},
	"1263225722": {
		"Title": "git clone without history",
		"Essay": "If you're using a library from git in another project, you may want to download it without the history. Here's how:\n\n<blockquote>git clone --depth 1 your_repo_url</blockquote>\n\n<a href=\"http://git.or.cz/gitwiki/GitFaq#HowdoIdoaquickclonewithouthistoryrevisions.3F\">http://git.or.cz/gitwiki/GitFaq#HowdoIdoaquickclonewithouthistoryrevisions.3F</a>"
	},
	"1262712214": {
		"Title": "Learn Symbolic Links in 30 seconds",
		"Essay": "Symbolic links are simple and can save you time.\n\nHere's all you need to know:\n\n<blockquote>ln -s actual_file_or_directory new_symbolic_link_name</blockquote>\n\nLet's do a real example from your home directory:\n\n<blockquote>ln -s /var/www/html/yourwebsiteroot/yourblog blog</blockquote>\n\nNow when you login to your server you can just type \"cd blog\" to access the \"/var/www/html/yourwebsiteroot/yourblog\" folder.\n\nHere's one more example from your home directory:\n\n<blockquote>ln -s /etc/httpd/conf/httpd.conf httpd.conf</blockquote>\n\nNow you can just type \"vim httpd.conf\" and edit your httpd.conf file quicker.\n\nYou can do all kinds of neat things with symlinks, but the simplest uses are often the ones you'll use most. (One of the cooler uses of symlinks is for deploying different versions of websites).\n\nNotes\n1. <a href=\"http://breckyunits.com/code/use_aliases_to_save_time\">Aliases</a> are another great time saver."
	},
	"1262711036": {
		"Title": "Create a new user in Linux",
		"Essay": "<nomarkdown>Creating a new user in Linux is dead simple.\r\n\r\n<blockquote>useradd bob\r\n\r\npasswd bob\r\n</blockquote>\r\n\r\nThis adds a user \"bob\" and then prompts you to enter a password."
	},
	"1262039753": {
		"Title": "Use aliases to save time",
		"Essay": "Using aliases in Linux can save you a lot of time. Here's an example:\n\n<blockquote>alias www='cd /var/www/html/'</blockquote>\n\nInstead of typing \"cd /var/www/html/\" to enter your web directory, now you can enter \"www\", a savings of at least 14 keystrokes each time you use it.\n\nThis one will switch to the usr/sbin directory, restart apache, then switch to your home directory:\n\n<blockquote>alias apr='cd /usr/sbin/;sudo ./apachectl restart;cd'</blockquote>\n\nYou can also just do:\n\n<blockquote>alias apr='/usr/sbin/apachectl restart'</blockquote>\n\nBut the earlier example shows how you can string multiple commands together.\n\n<b>Bonus tip</b>\n\nPlace these aliases in your HOME/.bash_profile file and they will be available each time you login to your machine.\n\n\nNotes\n1. \"At least\" 14 keystrokes, because the # of typos increases as the # of characters typed increases."
	},
	"1261935622": {
		"Title": "How I organize my Dropbox",
		"Essay": "Gmail encourages users to \"search not sort\". I do that.\n\nEmail works great for search. For files though, sorting is often better.\n\nI have well over 20GB of files synced onto my Dropbox.\n\nThe rest of my computer is spotless(I use Windows 7 and do a fresh install every 30-60 days).\n\nBut the Dropbox can get cluttered.\n\nI take a simple approach that is a hybrid of search and sort. Here's how to do it:\n\n<blockquote>Put files into 2 sections: \n-Put commonly accessed folders in the root directory.\n-Put everything else in a \"Search\" directory, which is in the Dropbox root directory.</blockquote>\n\n- Create a folder in your root Dropbox directory named \"Search\". Plop anything in here.\n- Keep your most common folders in the root Dropbox directory. Sort these ones.\n- Every few weeks, move any rarely used files and folders into the \"Search\" directory. Bring any commonly used files and folders back out to the root Dropbox directory.\n\n<b>End Result</b>\n\nHere's what the end result may look like:\n\n-My Dropbox\n--Music\n--Photos\n--Blog\n--eBooks\n--Company Docs\n--Search\n \n\nThe first directories are the ones you access a lot and are well sorted and maintained. The last directory is a mess of random files and folders that you've collected. You can browse through it, but it's easier to just run a search on it when you need something.\n\nThis a hybrid of search and sort.\n\nNotes\n1. All of my coding work is done in my cygwin home directory and then pushed to github. These are the only files that I don't store in Dropbox, but I push them frequently so don't worry much about losing them. \n"
	},
	"1261930315": {
		"Title": "Use git to get the latest source code only",
		"Essay": "Say you want to get just the source code of a git repository without all the history(without the \".git\" directory). Use this:\n\n<blockquote>git clone --depth 1 git://github.com/breck7/brecksblog.git</blockquote>"
	},
	"1261844298": {
		"Title": "What non-web software do you use the most?",
		"Essay": "Here are the programs I use everyday, every week, and every month. \n\nWhat software do you use the most? What are your \"must haves\"?\n\n<b>My Machines</b>\n\nMy primary development machine is a basic Compaq laptop with 4GB, 230GB, x2 Core Athlon, running Windows Vista/7. \n\nMy secondary machine is an Asus EEE netbook with XP which is great for working on the road, at a coffee shop, or on a plane. \n\nMost of our servers are slices from slicehost running Fedora.\n\nOn all my development machines I run Cygwin. Programs I run in Cygwin are noted by *. \n\nThe following is a list of the programs I use on my development machines.\n\n<h2>Daily</h2>\n\n<b>Cygwin</b>. I prefer Windows+cygwin over Macs, Fedora or Ubuntu, or Windows plus running virtualized machines.\n\n<b>Notepad++</b>. I do half my editing in Notepad++ and half in Vim. I love Notepad++'s speed, reliability, and autocomplete.\n\n<b>Dropbox</b>. Completely changed how I work. Allows me to work from multiple computers seamlessly. Allows me to share files easily with clients, family, and friends. Reinstalling Windows (which I do a few times per year), is made easy because all my important files are kept on my dropbox. The fact that install and uninstall is so easy and doesn't require a reboot really impresses me.\n\n<b>WAMP</b>. The \"AMP\" stack is what I develop for mostly. WAMP gives me an easy local testing environment to try things out before pushing to a server.\n\n<b>Chrome</b>. I spend most of my web time in Chrome. It's lighting fast. It's also simple. Tabs are done incredibly well.\n\n<b>Firefox</b>. Still need this guy. The extensions are great. Firebug and the Web Developer's Extension I use at least weekly, close to daily. It's also nice to have 2 browsers going if you want to log in to the same site with 2 different accounts.\n\n<b>Skype</b>. I don't use a cellphone, believe it or not. My Google Voice number points to my Skype In number. Skype allows me to not have a cellphone, which I greatly appreciate. My sister can call me from the Middle East just as easily and for the same price that my neighbors can call me from down the street.\n\n<b>*Vim</b>. The only Nix editor I know and love. Vim took me a while to learn, but is becoming more and more indispensable the better I get at \"typing in Vim\". \n\n<b>*Git</b>. Easy to use version control that makes sense. Paired with github, becomes indispensable.\n\n<b>*Rsync</b>. Great for deploying simple websites and for downloading backups.\n\n<b>*Grep</b>. Great when you need to track down a word or line across multiple files.\n\n<b>*Find</b>. Simple and easy for finding files. I also use find over Windows 7's search occasionally.\n\n<b>*Cron</b>. Simple and essential.\n\n<b>*SSH</b>. Of course.\n\n<b>*Ruby</b>. I keep irb running in a window when I need to do quick calculations.\n\n<h2>Weekly</h2>\n\n<b>Navicat</b>. Great way to keep an eye on databases. I also like it for creating and editing schemas. Find it easier to visualize a schema than to code it out.\n\n<b>Filezilla</b>. Occasionally when I just want to drag and drop some things from or to a server. \n\n<b>Photoshop</b>. I use an old version of Photoshop which is still way to advanced for me. But it's fast and gets the job done.\n\n<b>7zip</b>. \"Extract to here\" is a great little feature that it adds to the right click menu.\n\n<b>Word & Excel 2007</b>. Solid programs. Too bulky for my liking, but necessary in many cases.\n\n<h2>Monthly</h2>\n\n<b>Visual Studio</b>. When I get an urge to write a new desktop program. "
	},
	"1261766157": {
		"Title": "Fix permission problems using chmod",
		"Essay": "Permission problems driving you crazy? Here's a common command to fix them:\n\n<blockquote>chmod -R 755 directoryname</blockquote>\n\nChange the file permissions of all directories and files in directoryname to 755."
	},
	"1261765330": {
		"Title": "Use the linux find command to find files",
		"Essay": "Say you're looking for all files starting with the word \"breck\". Using the linux \"find\" command, it's simple:\n\n<blockquote>find -name \"breck*\"</blockquote>\n\nWill search the current directory <em>and all subdirectories</em> for files starting with the word \"breck\"."
	},
	"1261764210": {
		"Title": "cron in 2 steps",
		"Essay": "cron lets you schedule linux commands to execute on a regular basis.\n\nFor instance, say we want to run the command \"wget http://yourdomain.com/backup.zip\" each hour, that downloads a backup of one of your websites.\n\n<b>Step 1: Write the cron command</b>\n\nHere is the cron command you would need:\n\n<blockquote>0\t*\t*\t*\t*\twget http://yourdomain.com/backup.zip</blockquote>\n\nYou can either memorize the <a href=\"http://en.wikipedia.org/wiki/Cron#crontab_syntax\">crontab syntax</a>, or just this simple Javascript <a href=\"http://www.openjs.com/scripts/jslibrary/demos/crontab.php\">crontab gui</a> will easily generate the code for you.\n\n<b>Step 2: Append the command to your crontab file</b>\n\nThere are 2 crontab files that get executed every minute. 1 of them is found in /etc or similar and is controlled by root only. In addition, each user can have a crontab.\n\nTo add your command to crontab type:\n\n<blockquote>crontab -e</blockquote>\n\nThis will open vim, and you can then paste and save your crontab file.\n\nViola!\n\nNotes:\n1. If you are using cron in cygwin, follow <a href=\"http://www.newmedialogic.com/node/33\">these steps</a> after installing the cron package with the cygwin installer to install cron as a service:\n\n<blockquote>cygrunsrv -I cron -p /usr/sbin/cron -a D\n\nnet start cron</blockquote>\n\nIf there are problems, check the cron.log file in your home directory.\n\n"
	},
	"1261514853": {
		"Title": "Use grep to search multiple files at once",
		"Essay": "grep lets you search through multiple text files at once.\r\n\r\nI recently removed a feature from a project and wanted to make sure I removed all references to it. With grep it was easy:\r\n\r\n<blockquote>grep -r picture *</blockquote>\r\n\r\nThis searched all the files in my current directory as well as all the files in each subdirectory, and printed the filename and line where the word \"picture\" appeared.\r\n\r\nThen I went in and changed the 2 files that needed modifying.\r\n\r\nHad I wanted to just search the current directory (without the subdirectories) I could have done:\r\n\r\n<blockquote>grep picture *.*</blockquote>\r\n\r\nThis would have searched through all the files in the current directory.\r\n\r\nHad I wanted to search in just 1 specific file:\r\n\r\n<blockquote>grep picture filename.txt</blockquote>\r\n\r\nHad I wanted to do a case insensitive search:\r\n\r\n<blockquote>grep -ir picture *</blockquote>\r\n\r\nHad I wanted to exclude a directory and done a case insensitive search:\r\n\r\n<blockquote>grep -ri \"searchstring\" --exclude=\"*\\.svn*\" *</blockquote>\r\n\r\n(grep uses regular expressions)\r\n\r\nLinks\r\n1. <a href=\"http://en.wikipedia.org/wiki/Grep\">Wikipedia grep</a>\r\n2. <a href=\"http://stackoverflow.com/questions/221921/grep-exclude-include-syntax-do-not-grep-through-certain-files\">Stackoverflow</a>."
	},
	"1261431409": {
		"Title": "Use rsync to deploy your website",
		"Essay": "rsync is a nifty little tool that can deploy a website to a testing or production server.\r\n\r\nHere's a one line command to deploy brecksblog:\r\n\r\n> rsync -arvuz /home/user/brecksblog breck32@breckyunits.com:/var/www/html/ --exclude '.git' --exclude 'deploy' --exclude 'README' --exclude 'posts.php'\r\n\r\nThis one line will do a fast, incremental file transfer from my local directory to the web server. \r\n\r\nI saved this file as \"deploy\", and then run it by typing:\r\n\r\n> ./deploy\r\n\r\nThe exclude option will exclude a file or directory from being synced.\r\n\r\nHere's an <a href=\"http://ubuntuforums.org/showthread.php?t=251516\">explanation</a> about the options I use:\r\n\r\nI use rsync with these options:\r\n\r\n> rsync -arvuz /src/foo/ /dest/foo\r\n\r\nthis will copy the contents of /src/foo/ into /dest/foo\r\n\r\noptions explained:\r\n\r\n- a: archive mode (keep owner and permissions)\r\n- r: recurse into directories\r\n- v: increase verbosity\r\n- u: update only (don't overwrite newer files - if you have edited files in destination)\r\n- z: compress file data\r\n\r\n\r\nNotes \r\n\r\n1. If you are using a different port for SSH, say 333 do this: --rsh=\"ssh -p333\""
	},
	"1261331534": {
		"Title": "SSH into your server without a password",
		"Essay": "On your server:\r\n\r\n<blockquote>vim /etc/ssh/sshd_config</blockquote>\r\n\r\nMake sure allow rsa and the other RSA lines are uncommented\r\n\r\n<blockquote>service sshd restart</blockquote>\r\n\r\nMake sure the file ~/.ssh/authorized_keys exists(if it doesn't, make that directory and touch that file).\r\n\r\nRun this on your client computer:\r\n\r\n<blockquote>ssh-keygen -t rsa</blockquote>\r\n\r\n(hit enter a bunch of times)\r\n\r\n<blockquote>cat ~/.ssh/id_rsa.pub | ssh YOURUSERNAME@YOURDOMAIN.com \"cat - >> ~/.ssh/authorized_keys\"</blockquote>\r\n\r\n\r\nBam! Login without a password!\r\n\r\nThis is my setup on Fedora VM's running at slicehost.\r\n\r\n### If you are having problems\r\n\r\n1. Run sshd with the verbose option. -v\r\n\r\n2. The problem is likely due to bad file permissions. The owner of the directory .ssh should be your user/group. The file permissions on it should be: 755. (I think)\r\n\r\nauthorized_keys should be the same owner/group and file permissions should be:  644"
	},
	"1261331286": {
		"Title": "Get VIM Working in Cygwin",
		"Essay": "I had trouble getting VIM behaving as expected under Cygwin.\n\nSpecifically, the backspace and arrow keys were behaving badly in insert mode.\n\nThe solution was dead simple.\n\nJust run:\n\n<blockquote>touch .vimrc</blockquote>\n\nin your root directory. \n\nLinks:\n<a href=\"http://www.daniel-lemire.com/blog/archives/2005/02/17/using-vim-under-cygwin/\">Found this solution in the comment from Gregg</a>\n<a href=\"http://jmcpherson.org/vimrc.html\">vimrc</a>\n"
	},
	"1261153687": {
		"Title": "About this Blog",
		"Essay": "I constantly want to share little coding tidbits, snippets, or stories on how to solve specific little coding problems. Instead of clogging up the <a href=\"/\">main blog</a> with these shorter, more specific technical posts, I decided to launch a second blog.\n\nThis is it."
	}
}
