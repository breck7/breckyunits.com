Strong Advice
=============

May 6, 2021

I split advice into two categories:

1. ü•† WeakAdvice
2. üíéüìäüß™ StrongAdvice.

Examples
========

WeakAdvice:

> ü•† Reading is to the mind what exercise is to the body.

> ü•† Talking to users is the most important thing a startup can do.

StrongAdvice:

> üíéüìäüß™ In my whole life, I have known no wise people (over a broad subject matter area) who didn't read all the time ‚Äì none, zero.
 Charlie Munger
  https://fs.blog/2014/06/charlie-munger-recommended-books/ Charlie Munger

> üíéüìäüß™ I don't know of a single case of a startup that felt they spent too much time talking to users.
 Jessica Livingston
  https://www.ycombinator.com/library/5l-how-not-to-fail Jessica Livingston

> üíéüìäüß™ Every single person I‚Äôve interviewed thus far, even those working with billions of dollars, have all sent cold emails.
 Sonith Sunku
  https://x.com/_sonith/status/1900001512421761171 Sonith Sunku

*

If you only look at certain dimensions, you may conclude the WeakAdvice is better.

WeakAdvice is shorter and does not have an author's name.

But all things considered, StrongAdvice is 100x better.

*

Defining StrongAdvice
=====================

> StrongAdvice is advice that is concise, derived from data, and easy to falsify.

*

1. üíé Concise
2. üìä Derived from data
3. üß™ Easy to falsify

*

Unlike WeakAdvice, StrongAdvice needs to be backed by a large dataset.

Example
=======

In 2009 I wrote:
 https://breckyunits.com/twelve-tips-to-master-programming-faster.html I wrote

> ü•† to master programming, it might take you 10,000 hours of being actively coding or thinking about coding.

Ten years later, I now have the data to write:
 https://github.com/breck7/30000hours data

> üíéüìäüß™ Every programmer I respect the most has practiced more than 30,000 hours^hours.

Even though the message is the same, the latter introduces a dataset to the problem and is instantly testable.

*

StrongAdvice can't just be the inclusion of a dataset. It should be constructed to provide _instant_ testability.

Without the testability Munger's quote would be WeakAdvice:

> ü•† I've met hundreds of wise people who read all the time

A testable version is a 1,000x stronger signal. If Munger, who likely met more wise people than nearly anyone, never came across an instance of someone wise who didn't read all the time, it's a pretty strong signal that reading is a _requirement_ for being wise.

Versus the WeakAdvice version, which would also be true if it was just a slight correlation.

*

Sometimes you see WeakAdvice evolve into StrongAdvice, where an advisor hasn't quite made it instantly testable yet but is proposing a way for the reader to test:

> üíéüìä If you look at a broad cross-section of startups -- say, 30 or 40 or more; which of team, product, or market is most important?...market is the most important factor in a startup's success or failure.
 Marc Andreessen
  https://pmarchive.com/guide_to_startups_part4.html Marc Andreessen

*

Coming up with StrongAdvice requires time.

Like a good Proof of Work algorithm, StrongAdvice is hard to generate but easy to test.

I know Charlie Munger has met thousands of "wise people". All it would take would be for me to find just a single one that didn't read all the time to invalidate his advice. But I can't.

I know Jessica Livingston knows thousands of startups and I just need to find one who regrets spending so much time talking to users. But I can't.

*

If you have a lot of experience, I urge you to chew on your WeakAdvice until you can form it into StrongAdvice.

StrongAdvice is perhaps the most valuable contribution to our common blockchain.

*

My back of the envelope guess is that 99.9% of advice is written in WeakAdvice.

WeakAdvice is valuable for changing your perspective.

WeakAdvice is good for ideating.

Nothing wrong with WeakAdvice.

But it's worth a lot less than StrongAdvice.

*

Mistakes happen when people treat WeakAdvice like StrongAdvice.

Bad advice is a mistake on the reader's part, not the writer's.

Most "bad advice" has a famous person on one end, simply because they are constantly hounded for advice.

Mostly they'll give out WeakAdvice, since new StrongAdvice take time to create.

*

When you can quickly identify the difference between WeakAdvice and StrongAdvice, you're less likely to make the mistake of blindly betting on WeakAdvice.

It's safe to use WeakAdvice for ideating but not for decision making.

StrongAdvice you can bet on.

‚ÅÇ

Notes
=====

^hours: There are a lot of programmers who have 10,000 hours of experience that I respect a lot and enjoy working with, but the ones I study the most are the ones who stuck with it (and also just lucky enough to live long lives).

Follow me on X
 https://twitter.com/breckyunits Follow me on X
Built with Scroll v178.2.3
